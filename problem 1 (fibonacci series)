#include <iostream>
#include<vector>
using namespace std;

// Memoization  T.C = O(N) S.C = O(N)+O(N)
int fib(int n,vector<int>& dp){
  if(n<=1) return n;
  if(dp[n] != -1) return dp[n];

  return dp[n] = fib(n-1,dp)+fib(n-2,dp);
}


// Tabulation  T.C = O(N) S.C = O(N)
int fibTab(int n,vector<int>& dp){
  dp[0] = 0;
  dp[1] = 1;
  for(int i=2;i<=n;i++){
    dp[i] = dp[i-1]+dp[i-2];
  }

  return dp[n];
}

// Space optimization   T.C = O(N) S.C = O(1)
int fibSO(int n){
  if(n<=1) return n;
  int prev1 = 1;
  int prev2 = 0;

  for(int i=2;i<=n;i++){
    int curr= prev1 + prev2;
    prev2 = prev1;
    prev1 = curr;
  }

  return prev1;
}



int main() {
  int n = 7;
  vector<int> dp(n+1,-1);
  cout<<"fibonacci "<<fib(n,dp)<<endl;

  cout<<"fibonacci "<<fibTab(n,dp)<<endl;

  
  cout<<"fibonacci "<<fibSO(8)<<endl;
  return 0;
}
